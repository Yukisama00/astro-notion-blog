---
---

<div class="search-modal-container">
  <div class="overlay"></div>

  <div class="search-modal">
    <div class="search-prompt">
      <input type="text" placeholder="Search..." />
    </div>
    <div class="search-result">
      <ul>
        <li class="selected">
          <a href="#">
            <div class="search-result-title"></div>
            <div class="search-result-description"></div>
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<style>
  .search-modal-container {
    display: none;
  }

  .overlay {
    z-index: 99;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .search-modal {
    z-index: 100;
    position: fixed;
    top: 100px;
    left: 20%;
    width: 60%;
    border-radius: 8px;
    background-color: white;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    border: 1px solid #e0e0e0;
    overflow: hidden;
  }
  
  @media (max-width: 640px) {
    .search-modal {
      left: 5%;
      width: 90%;
      top: 50px;
    }
  }

  .search-prompt {
    margin: 0;
    padding: 16px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .search-prompt input {
    width: 100%;
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    padding: 12px 16px;
    background-color: white;
    color: #333;
    font-size: 16px;
    line-height: 1.4;
    outline: none;
    transition: border-color 0.2s ease;
  }
  
  .search-prompt input:focus {
    border-color: #0066cc;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  .search-result {
    background-color: white;
    max-height: 400px;
    overflow-y: auto;
  }
  
  .search-result ul {
    list-style: none;
    margin: 0;
    padding: 8px 0;
  }
  
  .search-result li {
    margin: 0 !important;
    padding: 0 !important;
    border-bottom: 1px solid #f0f0f0 !important;
  }
  
  .search-result li:last-child {
    border-bottom: none !important;
  }
  
  .search-result li a {
    display: block !important;
    padding: 16px 16px !important;
    text-decoration: none !important;
    color: #333 !important;
    transition: all 0.15s ease !important;
    border-left: 3px solid transparent !important;
  }
  
  .search-result li a:hover {
    background-color: #f0f7ff;
    border-left-color: #0066cc;
  }
  
  .search-result li a:hover .search-result-title {
    color: #0066cc;
  }
  
  .search-result li a:hover .search-result-description {
    color: #555;
  }
  
  .search-result li.selected a {
    background-color: #0066cc;
    color: white;
    border-left-color: #004499;
  }

  .search-result-title {
    padding: 0;
    color: #1a1a1a;
    font-size: 18px;
    line-height: 1.3;
    font-weight: 700;
    margin-bottom: 8px;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }
  
  .search-result-description {
    margin: 0;
    color: #666;
    opacity: 0.9;
    font-size: 13px;
    line-height: 1.4;
    font-weight: 400;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .search-result li.selected .search-result-title {
    color: white;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }
  
  .search-result li.selected .search-result-description {
    color: rgba(255, 255, 255, 0.9);
    opacity: 1;
  }

  .no-results, .error-message {
    padding: 24px 16px;
    text-align: center;
    color: #666;
    font-style: italic;
  }
  
  .error-message {
    color: #dc3545;
    font-weight: 600;
    font-style: normal;
  }

  /* 検索結果のハイライト表示 */
  .search-highlight {
    background-color: #ffeb3b;
    font-weight: bold;
    padding: 1px 3px;
    border-radius: 3px;
    color: #333;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .search-result li.selected .search-highlight {
    background-color: #ffd700;
    color: #000;
  }

  .loading-indicator {
    padding: 24px 16px;
    text-align: center;
    color: #666;
    font-style: italic;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('SearchModal script loaded');

    let feedItems = []
    let fetched = false
    let isModalOpen = false
    let isLoading = false

    async function openModal() {
      isModalOpen = true
      document.querySelector('.search-modal-container').style.display = 'block'
      document.querySelector('.search-prompt input').focus()

      if (!fetched && !isLoading) {
        isLoading = true
        renderLoading()
        try {
          await fetchRSS()
        } catch (error) {
          console.error('Failed to fetch RSS:', error)
          renderError()
          return
        } finally {
          isLoading = false
        }
      }
      searchAndRender()
    }

    function closeModal() {
      isModalOpen = false
      document.querySelector('.search-modal-container').style.display = 'none'
      document.querySelector('.search-prompt input').value = ''
    }

    function handleKeydown(event) {
      if (!isModalOpen) return

      if (event.keyCode === 13) {
        // Enter
        event.preventDefault()
        select()
      } else if (event.keyCode === 27) {
        // ESC
        event.preventDefault()
        closeModal()
      } else if (event.keyCode === 38) {
        // Up
        selectUp(event)
      } else if (event.keyCode === 40) {
        // Down
        selectDown(event)
      }
    }

    function handleInput() {
      if (isModalOpen) {
        searchAndRender()
      }
    }

    function select() {
      const a = document.querySelector('.search-result ul > li.selected a')
      if (a && a.href !== '#') {
        window.location.href = a.href
      }
    }

    function selectFirst() {
      const currentSelected = document.querySelector('.search-result ul > li.selected')
      if (currentSelected) {
        currentSelected.classList.remove('selected')
      }

      const li = document.querySelector('.search-result ul > li:first-child')
      if (li) {
        li.classList.add('selected')
      }
    }

    function selectUp(event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul')
      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.previousElementSibling) {
          selected.previousElementSibling.classList.add('selected')
        } else {
          ul.lastElementChild.classList.add('selected')
        }
      } else {
        const lastChild = ul.lastElementChild
        if (lastChild) {
          lastChild.classList.add('selected')
        }
      }
    }

    function selectDown(event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul')
      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.nextElementSibling) {
          selected.nextElementSibling.classList.add('selected')
        } else {
          ul.firstElementChild.classList.add('selected')
        }
      } else {
        const firstChild = ul.firstElementChild
        if (firstChild) {
          firstChild.classList.add('selected')
        }
      }
    }

    function handleMouseover(event) {
      const ul = event.target.closest('ul')
      if (!ul) return

      Array.from(ul.children).forEach((element) => {
        element.classList.remove('selected')
      })
      const li = event.target.closest('li')
      if (li) {
        li.classList.add('selected')
      }
    }

    function searchAndRender() {
      const text = document.querySelector('.search-prompt input').value.trim()

      if (text !== '') {
        const results = search(text)
        renderResults(results, text)
      } else {
        renderResults(feedItems)
      }

      selectFirst()
    }

    // HTMLタグを削除するヘルパー関数
    function stripHtml(html) {
      const temp = document.createElement('div')
      temp.innerHTML = html
      return temp.textContent || temp.innerText || ''
    }

    // 検索語をハイライトするヘルパー関数
    function highlightSearchTerm(text, searchTerm) {
      if (!searchTerm || !text) return text
      
      // 複数の単語での検索に対応
      const terms = searchTerm.split(/\s+/).filter(function(term) {
        return term.length > 0
      })
      
      let highlightedText = text
      
      terms.forEach(function(term) {
        // 特殊文字をエスケープ
        const escapedTerm = term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        const regex = new RegExp('(' + escapedTerm + ')', 'gi')
        highlightedText = highlightedText.replace(regex, '<span class="search-highlight">$1</span>')
      })
      
      return highlightedText
    }

    // テキストを安全に切り取る関数
    function truncateText(text, maxLength) {
      if (!maxLength) maxLength = 120
      if (text.length <= maxLength) return text
      
      // 単語の境界で切り取り
      const truncated = text.substring(0, maxLength)
      const lastSpace = truncated.lastIndexOf(' ')
      
      if (lastSpace > maxLength * 0.8) {
        return truncated.substring(0, lastSpace) + '...'
      }
      
      return truncated + '...'
    }

    // 改良された検索関数
    function search(query) {
      const results = []
      const lowerQuery = query.toLowerCase()

      feedItems.forEach(function(item) {
        let score = 0
        let matchedContent = ''

        // タイトルでの検索（高いスコア）
        const titleMatch = item.title.toLowerCase().includes(lowerQuery)
        if (titleMatch) {
          score += 10
          matchedContent = item.title
        }

        // 説明文での検索（中程度のスコア）
        const descriptionMatch = item.description && item.description.toLowerCase().includes(lowerQuery)
        if (descriptionMatch) {
          score += 5
          if (!matchedContent) matchedContent = item.description
        }

        // 本文での検索（低いスコア、ただし重要）
        const contentMatch = item.content && item.content.toLowerCase().includes(lowerQuery)
        if (contentMatch) {
          score += 3
          if (!matchedContent) {
            // 検索語周辺のテキストを抽出してハイライト用に準備
            const contentText = stripHtml(item.content)
            const lowerContent = contentText.toLowerCase()
            const index = lowerContent.indexOf(lowerQuery)
            
            if (index !== -1) {
              const start = Math.max(0, index - 60)
              const end = Math.min(contentText.length, index + lowerQuery.length + 60)
              let excerpt = contentText.substring(start, end)
              
              // 前後に省略記号を追加
              if (start > 0) excerpt = '...' + excerpt
              if (end < contentText.length) excerpt = excerpt + '...'
              
              matchedContent = excerpt
            }
          }
        }

        if (score > 0) {
          results.push({
            title: item.title,
            link: item.link,
            description: item.description,
            content: item.content,
            pubDate: item.pubDate,
            score: score,
            matchedContent: matchedContent || item.description
          })
        }
      })

      // スコア順にソート
      return results.sort(function(a, b) {
        return b.score - a.score
      })
    }

    function renderResults(results, searchTerm) {
      const ul = document.querySelector('.search-result ul')
      ul.innerHTML = ''

      if (results.length === 0) {
        const li = document.createElement('li')
        const div = document.createElement('div')
        div.className = 'no-results'
        div.textContent = '検索結果が見つかりませんでした'
        li.appendChild(div)
        ul.appendChild(li)
        return
      }

      results.forEach(function(item) {
        const li = document.createElement('li')
        const a = document.createElement('a')
        const title = document.createElement('div')
        const description = document.createElement('div')

        title.className = 'search-result-title'
        const titleText = item.title || 'タイトルなし'
        title.innerHTML = highlightSearchTerm(titleText, searchTerm || '')

        description.className = 'search-result-description'
        let descText = item.matchedContent || item.description || ''
        
        // 説明文が長すぎる場合は切り取り
        descText = truncateText(descText, 150)
        description.innerHTML = highlightSearchTerm(descText, searchTerm || '')
        
        a.href = item.link || '#'

        li.addEventListener('mouseover', handleMouseover)

        a.appendChild(title)
        a.appendChild(description)
        li.appendChild(a)
        ul.appendChild(li)
      })
    }

    function renderError() {
      const ul = document.querySelector('.search-result ul')
      ul.innerHTML = ''
      
      const li = document.createElement('li')
      const div = document.createElement('div')
      div.className = 'error-message'
      div.textContent = 'RSSフィードの取得に失敗しました'
      li.appendChild(div)
      ul.appendChild(li)
    }

    function renderLoading() {
      const ul = document.querySelector('.search-result ul')
      ul.innerHTML = ''
      
      const li = document.createElement('li')
      const div = document.createElement('div')
      div.className = 'loading-indicator'
      div.textContent = '記事を読み込み中...'
      li.appendChild(div)
      ul.appendChild(li)
    }

    // 個別記事の本文を取得する関数
    async function fetchArticleContent(url) {
      try {
        const response = await fetch(url)
        if (!response.ok) return ''
        
        const html = await response.text()
        const parser = new DOMParser()
        const doc = parser.parseFromString(html, 'text/html')
        
        // 記事本文を取得（一般的なセレクタを使用）
        const contentSelectors = [
          'article',
          '.content',
          '.post-content',
          '.entry-content',
          'main',
          '#content'
        ]
        
        for (const selector of contentSelectors) {
          const element = doc.querySelector(selector)
          if (element) {
            return element.textContent || element.innerText || ''
          }
        }
        
        return ''
      } catch (error) {
        console.warn('Failed to fetch content for ' + url + ':', error)
        return ''
      }
    }

    async function fetchRSS() {
      const url = new URL(location.href)
      const port = url.port ? ':' + url.port : ''

      const res = await fetch(
        url.protocol + '//' + url.hostname + port + '/feed'
      )
      
      if (res.status !== 200) {
        throw new Error('HTTP ' + res.status + ': Failed to fetch RSS feed')
      }

      const body = await res.text()

      const parser = new DOMParser()
      const xml = parser.parseFromString(body, 'text/xml')

      const parseError = xml.querySelector('parsererror')
      if (parseError) {
        throw new Error('Invalid XML format')
      }

      const items = xml.getElementsByTagName('item')
      if (items.length === 0) {
        console.warn('No items found in RSS feed')
      }

      // 基本情報を先に収集
      const itemsData = Array.from(items).map(function(item) {
        const titleEl = item.getElementsByTagName('title')[0]
        const linkEl = item.getElementsByTagName('link')[0]
        const descriptionEl = item.getElementsByTagName('description')[0]
        const pubDateEl = item.getElementsByTagName('pubDate')[0]
        const contentEl = item.getElementsByTagName('content:encoded')[0] || 
                         item.getElementsByTagName('content')[0]

        const title = titleEl ? titleEl.textContent : 'タイトルなし'
        const link = linkEl ? linkEl.textContent : '#'
        const description = stripHtml(descriptionEl ? descriptionEl.textContent : '')
        const pubDate = pubDateEl ? pubDateEl.textContent : ''
        const content = contentEl ? contentEl.textContent : ''

        return {
          title: title,
          link: link,
          description: description,
          pubDate: pubDate,
          content: stripHtml(content)
        }
      })

      feedItems = itemsData

      // バックグラウンドで各記事の本文を取得（オプション）
      const contentPromises = itemsData.slice(0, 10).map(async function(item, index) {
        if (!item.content && item.link !== '#') {
          try {
            const articleContent = await fetchArticleContent(item.link)
            if (articleContent) {
              feedItems[index].content = articleContent
            }
          } catch (error) {
            console.warn('Failed to fetch content for article: ' + item.title, error)
          }
        }
      })

      // 一部の記事本文の取得を並列実行（タイムアウト付き）
      try {
        await Promise.race([
          Promise.all(contentPromises),
          new Promise(function(_, reject) {
            setTimeout(function() {
              reject(new Error('Timeout'))
            }, 5000)
          })
        ])
      } catch (error) {
        console.warn('Some article contents could not be fetched:', error)
      }

      fetched = true
    }

    // イベントリスナーの設定
    Array.from(document.getElementsByClassName('open-search-modal')).forEach(
      function(element) {
        element.addEventListener('click', openModal)
      }
    )
    
    document
      .getElementsByClassName('overlay')[0]
      .addEventListener('click', closeModal)
    
    document.addEventListener('keydown', handleKeydown)
    
    document.querySelector('.search-prompt input')
      .addEventListener('input', handleInput)
  })
</script>