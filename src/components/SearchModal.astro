---
---

<div class="search-modal-container">
  <div class="overlay"></div>

  <div class="search-modal">
    <div class="search-prompt">
      <input type="text" placeholder="Search..." />
    </div>
    <div class="search-result">
      <ul>
        <li class="selected">
          <a href="#">
            <div class="search-result-title"></div>
            <div class="search-result-description"></div>
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<style>
  .search-modal-container {
    display: none;
  }

  .overlay {
    z-index: 99;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .search-modal {
    z-index: 100;
    position: fixed;
    top: 100px;
    left: 20%;
    width: 60%;
    border-radius: 8px;
    background-color: white;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
    border: 1px solid #e0e0e0;
    overflow: hidden;
  }
  
  @media (max-width: 640px) {
    .search-modal {
      left: 5%;
      width: 90%;
      top: 50px;
    }
  }

  .search-prompt {
    margin: 0;
    padding: 16px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .search-prompt input {
    width: 100%;
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    padding: 12px 16px;
    background-color: white;
    color: #333;
    font-size: 16px;
    line-height: 1.4;
    outline: none;
    transition: border-color 0.2s ease;
  }
  
  .search-prompt input:focus {
    border-color: #0066cc;
    box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
  }

  .search-result {
    background-color: white;
    max-height: 400px;
    overflow-y: auto;
  }
  
  .search-result ul {
    list-style: none;
    margin: 0;
    padding: 8px 0;
  }
  
  .search-result li {
    margin: 0;
    padding: 0;
  }
  
  .search-result li a {
    display: block;
    padding: 12px 16px;
    text-decoration: none;
    color: #333;
    transition: all 0.15s ease;
    border-left: 3px solid transparent;
  }
  
  .search-result li a:hover {
    background-color: #f0f7ff;
    border-left-color: #0066cc;
  }
  
  .search-result li.selected a {
    background-color: #0066cc;
    color: white;
    border-left-color: #004499;
  }

  .search-result-title {
    padding: 0;
    color: inherit;
    font-size: 16px;
    line-height: 1.3;
    font-weight: 600;
    margin-bottom: 4px;
  }
  
  .search-result-description {
    margin: 0;
    color: inherit;
    opacity: 0.8;
    font-size: 14px;
    line-height: 1.4;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  .search-result li.selected .search-result-description {
    opacity: 0.9;
  }

  .no-results, .error-message {
    padding: 24px 16px;
    text-align: center;
    color: #666;
    font-style: italic;
  }
  
  .error-message {
    color: #dc3545;
    font-weight: 600;
    font-style: normal;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    let feedItems = []
    let fetched = false
    let isModalOpen = false

    async function openModal() {
      isModalOpen = true
      document.querySelector('.search-modal-container').style.display = 'block'
      document.querySelector('.search-prompt input').focus()

      if (!fetched) {
        try {
          await fetchRSS()
        } catch (error) {
          console.error('Failed to fetch RSS:', error)
          renderError()
          return
        }
      }
      searchAndRender()
    }

    function closeModal() {
      isModalOpen = false
      document.querySelector('.search-modal-container').style.display = 'none'
      document.querySelector('.search-prompt input').value = ''
    }

    function handleKeydown(event) {
      if (!isModalOpen) return

      if (event.keyCode === 13) {
        // Enter
        event.preventDefault()
        select()
      } else if (event.keyCode === 27) {
        // ESC
        event.preventDefault()
        closeModal()
      } else if (event.keyCode === 38) {
        // Up
        selectUp(event)
      } else if (event.keyCode === 40) {
        // Down
        selectDown(event)
      }
    }

    function handleInput() {
      if (isModalOpen) {
        searchAndRender()
      }
    }

    function select() {
      const a = document.querySelector('.search-result ul > li.selected a')
      if (a && a.href !== '#') {
        window.location.href = a.href
      }
    }

    function selectFirst() {
      const currentSelected = document.querySelector('.search-result ul > li.selected')
      if (currentSelected) {
        currentSelected.classList.remove('selected')
      }

      const li = document.querySelector('.search-result ul > li:first-child')
      if (li) {
        li.classList.add('selected')
      }
    }

    function selectUp(event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul')
      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.previousElementSibling) {
          selected.previousElementSibling.classList.add('selected')
        } else {
          ul.lastElementChild.classList.add('selected')
        }
      } else {
        const lastChild = ul.lastElementChild
        if (lastChild) {
          lastChild.classList.add('selected')
        }
      }
    }

    function selectDown(event) {
      event.preventDefault()

      const ul = document.querySelector('.search-result ul')
      const selected = ul.querySelector('.selected')
      if (selected) {
        selected.classList.remove('selected')

        if (selected.nextElementSibling) {
          selected.nextElementSibling.classList.add('selected')
        } else {
          ul.firstElementChild.classList.add('selected')
        }
      } else {
        const firstChild = ul.firstElementChild
        if (firstChild) {
          firstChild.classList.add('selected')
        }
      }
    }

    function handleMouseover(event) {
      const ul = event.target.closest('ul')
      if (!ul) return

      Array.from(ul.children).forEach((element) => {
        element.classList.remove('selected')
      })
      const li = event.target.closest('li')
      if (li) {
        li.classList.add('selected')
      }
    }

    function searchAndRender() {
      const text = document.querySelector('.search-prompt input').value.trim()

      if (text !== '') {
        const results = search(text)
        renderResults(results)
      } else {
        renderResults(feedItems)
      }

      selectFirst()
    }

    function search(query) {
      const results = []
      const lowerQuery = query.toLowerCase()

      feedItems.forEach((item) => {
        const titleMatch = item.title.toLowerCase().includes(lowerQuery)
        const descriptionMatch = item?.description?.toLowerCase().includes(lowerQuery)
        
        if (titleMatch || descriptionMatch) {
          results.push(item)
        }
      })
      return results
    }

    function renderResults(results) {
      const ul = document.querySelector('.search-result ul')
      ul.innerHTML = ''

      if (results.length === 0) {
        const li = document.createElement('li')
        const div = document.createElement('div')
        div.className = 'no-results'
        div.textContent = '検索結果が見つかりませんでした'
        li.appendChild(div)
        ul.appendChild(li)
        return
      }

      results.forEach((item) => {
        const li = document.createElement('li')
        const a = document.createElement('a')
        const title = document.createElement('div')
        const description = document.createElement('div')

        title.className = 'search-result-title'
        title.textContent = item.title || 'タイトルなし'
        description.className = 'search-result-description'
        description.textContent = item.description || ''
        a.href = item.link || '#'

        li.addEventListener('mouseover', handleMouseover)

        a.appendChild(title)
        a.appendChild(description)
        li.appendChild(a)
        ul.appendChild(li)
      })
    }

    function renderError() {
      const ul = document.querySelector('.search-result ul')
      ul.innerHTML = ''
      
      const li = document.createElement('li')
      const div = document.createElement('div')
      div.className = 'error-message'
      div.textContent = 'RSSフィードの取得に失敗しました'
      li.appendChild(div)
      ul.appendChild(li)
    }

    async function fetchRSS() {
      const url = new URL(location.href)
      const port = url.port ? `:${url.port}` : ''

      const res = await fetch(
        `${url.protocol}//${url.hostname}${port}/feed`
      )
      
      if (res.status !== 200) {
        throw new Error(`HTTP ${res.status}: Failed to fetch RSS feed`)
      }

      const body = await res.text()

      const parser = new DOMParser()
      const xml = parser.parseFromString(body, 'text/xml')

      const parseError = xml.querySelector('parsererror')
      if (parseError) {
        throw new Error('Invalid XML format')
      }

      const items = xml.getElementsByTagName('item')
      if (items.length === 0) {
        console.warn('No items found in RSS feed')
      }

      Array.from(items).forEach((item) => {
        const titleEl = item.getElementsByTagName('title')[0]
        const linkEl = item.getElementsByTagName('link')[0]
        const descriptionEl = item.getElementsByTagName('description')[0]
        const pubDateEl = item.getElementsByTagName('pubDate')[0]

        const title = titleEl?.textContent || 'タイトルなし'
        const link = linkEl?.textContent || '#'
        const description = descriptionEl?.textContent || ''
        const pubDate = pubDateEl?.textContent || ''

        feedItems.push({
          title,
          link,
          description,
          pubDate,
        })
      })

      fetched = true
    }

    // イベントリスナーの設定
    Array.from(document.getElementsByClassName('open-search-modal')).forEach(
      (element) => {
        element.addEventListener('click', openModal)
      }
    )
    
    document
      .getElementsByClassName('overlay')[0]
      .addEventListener('click', closeModal)
    
    document.addEventListener('keydown', handleKeydown)
    
    document.querySelector('.search-prompt input')
      .addEventListener('input', handleInput)
  })
</script>